# football_checkin_bot.py

from dotenv import load_dotenv
load_dotenv()

from flask import Flask, request
import requests
import os
import re

app = Flask(__name__)

CHANNEL_ACCESS_TOKEN = os.getenv("CHANNEL_ACCESS_TOKEN")

# ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
checked_in_users = {}
session_info = {"datetime": None, "location": None, "color": None, "created_by": None}

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    for event in data.get('events', []):

        if event['type'] == 'message':
            user_id = event['source']['userId']
            message_text = event['message']['text'].strip()
            message_text_lower = message_text.lower()

            if message_text_lower == 'remove':
                checked_in_users.clear()
                session_info.update({"datetime": None, "location": None, "color": None, "created_by": None})
                reply_text(event['replyToken'], "‚ôªÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏∂‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                continue

            if message_text_lower == 'repeat':
                if all(session_info.values()):
                    reply_flex_message(event['replyToken'])
                else:
                    reply_text(event['replyToken'], "‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå checkin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà")
                continue

            if message_text_lower == '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠':
                reply_text(event['replyToken'], get_checkin_message("üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠"))
                continue

            if message_text_lower.startswith('@add'):
                name = message_text[4:].strip()
                if name:
                    synthetic_id = f"external_{len(checked_in_users)+1}"
                    checked_in_users[synthetic_id] = name
                    reply_text(event['replyToken'], f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {name} ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß\n\n" + get_checkin_message(name))
                else:
                    reply_text(event['replyToken'], "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á @add ‡πÄ‡∏ä‡πà‡∏ô @add ‡∏™‡∏°‡∏ä‡∏≤‡∏¢")
                continue

            if message_text_lower.startswith('@clear'):
                try:
                    index = int(message_text[6:].strip()) - 1
                    key_to_remove = list(checked_in_users.keys())[index]
                    name = checked_in_users.pop(key_to_remove)
                    reply_text(event['replyToken'], f"‚úÖ ‡∏•‡∏ö {name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß\n\n" + get_checkin_message("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠"))
                except:
                    reply_text(event['replyToken'], "‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô @clear 3 ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠")
                continue

            if message_text_lower.startswith('checkin'):
                session_info['created_by'] = user_id
                reply_datetime_input(event['replyToken'])

            elif user_id == session_info['created_by'] and validate_datetime_format(message_text):
                session_info['datetime'] = message_text
                reply_location_options(event['replyToken'])

            elif user_id == session_info['created_by'] and session_info['datetime'] is None:
                reply_text(event['replyToken'], "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: DD/MM/YY 18:00")

        elif event['type'] == 'postback':
            user_id = event['source']['userId']
            profile = get_user_profile(user_id)
            display_name = profile.get('displayName') or f"UID:{user_id[-4:]}"
            action = event['postback']['data']

            if action.startswith('location=') and user_id == session_info['created_by']:
                session_info['location'] = action.split('=')[1]
                reply_color_options(event['replyToken'])

            elif action.startswith('color=') and user_id == session_info['created_by']:
                session_info['color'] = action.split('=')[1]
                reply_flex_message(event['replyToken'])

            elif action == 'action=checkin':
                if not all(session_info.values()):
                    reply_text(event['replyToken'], "‚ö†Ô∏è Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå checkin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà")
                    continue
                if user_id in checked_in_users:
                    continue
                checked_in_users[user_id] = display_name
                reply_text(event['replyToken'], get_checkin_message(display_name))

            elif action == 'action=request_cancel':
                if user_id in checked_in_users and not checked_in_users[user_id].endswith("(confirming)"):
                    checked_in_users[user_id] += " (confirming)"
                    reply_cancel_confirmation(event['replyToken'])
                elif user_id in checked_in_users:
                    reply_text(event['replyToken'], f"‚ö†Ô∏è {display_name} ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    reply_text(event['replyToken'], f"‚ö†Ô∏è {display_name} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠")

            elif action == 'action=confirm_cancel':
                if user_id in checked_in_users:
                    name = checked_in_users[user_id].replace(" (confirming)", "")
                    del checked_in_users[user_id]
                    reply_text(event['replyToken'], get_checkin_message(name))
                else:
                    reply_text(event['replyToken'], f"‚ö†Ô∏è {display_name} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠")

            elif action == 'action=cancel':
                if user_id in checked_in_users and checked_in_users[user_id].endswith("(confirming)"):
                    checked_in_users[user_id] = checked_in_users[user_id].replace(" (confirming)", "")
                reply_text(event['replyToken'], "‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß")

    return '', 200

def validate_datetime_format(text):
    return re.match(r'^\d{2}/\d{2}/\d{2} \d{2}:\d{2}$', text)

def get_color_emoji(color):
    return {
        '‡∏î‡∏≥': '‚ö´Ô∏è',
        '‡πÅ‡∏î‡∏á': 'üî¥',
        '‡∏Ç‡∏≤‡∏ß': '‚ö™Ô∏è',
        '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô': 'üîµ'
    }.get(color, 'üëï')

def get_checkin_message(display_name):
    names = list(checked_in_users.values())
    name_list = "\n".join([f"{i+1}. {name}" for i, name in enumerate(names)])
    total = f"\nüë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠: {len(names)} ‡∏Ñ‡∏ô"
    color_emoji = get_color_emoji(session_info['color'])
    session = f"\nüìÜ ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤: {session_info['datetime']}\nüìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {session_info['location']}\n{color_emoji} ‡∏™‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠: {session_info['color']}" if all(session_info.values()) else ""
    return f"‚úÖ {display_name} ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!{session}\n\nüìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß:\n{name_list}{total}"

def reply_text(reply_token, text):
    headers = {
        "Authorization": f"Bearer {CHANNEL_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    body = {
        "replyToken": reply_token,
        "messages": [
            {"type": "text", "text": text}
        ]
    }
    requests.post("https://api.line.me/v2/bot/message/reply", json=body, headers=headers)

def reply_datetime_input(reply_token):
    reply_text(reply_token, "üìÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: 26/05/68 18:00")

def reply_location_options(reply_token):
    headers = {
        "Authorization": f"Bearer {CHANNEL_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    location_msg = {
        "type": "template",
        "altText": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
        "template": {
            "type": "buttons",
            "text": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏∞‡∏ö‡∏≠‡∏•:",
            "actions": [
                {"type": "postback", "label": "LT", "data": "location=LT"},
                {"type": "postback", "label": "LP", "data": "location=LP"}
            ]
        }
    }
    body = {
        "replyToken": reply_token,
        "messages": [location_msg]
    }
    requests.post("https://api.line.me/v2/bot/message/reply", json=body, headers=headers)

def get_user_profile(user_id):
    headers = {"Authorization": f"Bearer {CHANNEL_ACCESS_TOKEN}"}
    res = requests.get(f"https://api.line.me/v2/bot/profile/{user_id}", headers=headers)
    return res.json()

def reply_color_options(reply_token):
    headers = {
        "Authorization": f"Bearer {CHANNEL_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    color_msg = {
        "type": "template",
        "altText": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠",
        "template": {
            "type": "buttons",
            "text": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠:",
            "actions": [
                {"type": "postback", "label": "‡∏î‡∏≥", "data": "color=‡∏î‡∏≥"},
                {"type": "postback", "label": "‡πÅ‡∏î‡∏á", "data": "color=‡πÅ‡∏î‡∏á"},
                {"type": "postback", "label": "‡∏Ç‡∏≤‡∏ß", "data": "color=‡∏Ç‡∏≤‡∏ß"},
                {"type": "postback", "label": "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô", "data": "color=‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô"}
            ]
        }
    }
    body = {
        "replyToken": reply_token,
        "messages": [color_msg]
    }
    requests.post("https://api.line.me/v2/bot/message/reply", json=body, headers=headers)

def reply_flex_message(reply_token):
    headers = {
        "Authorization": f"Bearer {CHANNEL_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    flex_msg = {
        "type": "flex",
        "altText": "‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏∞‡∏ö‡∏≠‡∏•",
        "contents": {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {"type": "text", "text": f"‡πÄ‡∏ï‡∏∞‡∏ö‡∏≠‡∏• {session_info['datetime']} ‡∏ó‡∏µ‡πà {session_info['location']} ‡∏™‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠ {session_info['color']}", "weight": "bold", "size": "lg"},
                    {
                        "type": "button",
                        "action": {"type": "postback", "label": "‚úÖ ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠", "data": "action=checkin"},
                        "style": "primary",
                        "margin": "md"
                    },
                    {
                        "type": "button",
                        "action": {"type": "postback", "label": "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠", "data": "action=request_cancel"},
                        "style": "secondary",
                        "margin": "md"
                    }
                ]
            }
        }
    }
    body = {
        "replyToken": reply_token,
        "messages": [flex_msg]
    }
    requests.post("https://api.line.me/v2/bot/message/reply", json=body, headers=headers)

def reply_cancel_confirmation(reply_token):
    headers = {
        "Authorization": f"Bearer {CHANNEL_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    confirm_msg = {
        "type": "template",
        "altText": "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
        "template": {
            "type": "confirm",
            "text": "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
            "actions": [
                {"type": "postback", "label": "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "data": "action=confirm_cancel"},
                {"type": "postback", "label": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "data": "action=cancel"}
            ]
        }
    }
    body = {
        "replyToken": reply_token,
        "messages": [confirm_msg]
    }
    requests.post("https://api.line.me/v2/bot/message/reply", json=body, headers=headers)

if __name__ == '__main__':
    app.run(port=3000)
